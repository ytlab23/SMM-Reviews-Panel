---
import { getAPIPath, shuffleArray } from "../../js/utils";
import PanelLayout from "../../layouts/PanelLayout.astro";
interface serviceSchema {
    serviceColor: string;
    serviceLogo: {
        name: string;
        mediaType: string;
        url: string;
    };
    serviceTitle: string;
}

export const prerender = true;
export async function getStaticPaths() {
    const allServicesFetch: any = await fetch(getAPIPath() + "api/services.json");
    const allServiceRes: serviceSchema[] = await allServicesFetch.json();
    //     {
    // "cause": {
    // "name": "ConnectTimeoutError",
    // "code": "UND_ERR_CONNECT_TIMEOUT",
    // "message": "Connect Timeout Error"
    // }
    // }
    return allServiceRes.map((service: any) => ({
        params: {
            slug: service.serviceTitle
                .toString()
                .toLowerCase()
                .replaceAll(" ", "-"),
        },
        props: { service },
    }));
}

const { service } = Astro.props;
const { slug } = Astro.params;

let SMMService_APIData: any[] = [];
let allPanelAPIs: string[][] = [];
let platformsServiceCount: any[] = [];

//Fetching All Panels
const allPanelsFetch: any = await fetch(getAPIPath() + "api/panels.json");
let allPanelRes = await allPanelsFetch.json();

//Capturing Panel's APIUrl and APIKey
allPanelRes = shuffleArray(allPanelRes);
allPanelRes.slice(0,5).map((panel: any) =>
    allPanelAPIs.push([
        `${panel.panelAPILink}?key=${panel.panelAPIKey}&action=services`,
        panel.panelTitle,
        panel.panelWebsiteURL,
        panel.panelSlug,
    ]),
);

//Executing Every Panel's API to get services
for (let i = 0; i < allPanelAPIs.length; i++) {
    let panelServicesdata
    try {
        panelServicesdata = await fetch(allPanelAPIs[i][0], {method:'POST'}).then((Response) =>
            Response.json(),
        );
    } catch (error) {
        console.log(allPanelAPIs[i][0])
    }

    try {
        if(panelServicesdata.length == 0){
            panelServicesdata = await fetch(allPanelAPIs[i][0]).then((Response) =>
                Response.json(),
            );
    }
    } catch (error) {
        console.log(allPanelAPIs[i][0])
    }

    SMMService_APIData.push([
        panelServicesdata, 
        allPanelAPIs[i][1], 
        allPanelAPIs[i][2], 
        allPanelAPIs[i][3]]);
}

//Counting Services and Collecting all Relevant Services
let count = 0,
    relevantServices: any[] = [];
for (let j = 0; j < SMMService_APIData.length; j++) {
    for (let k = 0; k < SMMService_APIData[j][0].length; k++) {
        if (
            SMMService_APIData[j][0][k].name
                .toString()
                .toLowerCase()
                .includes(service.serviceTitle.toString().toLowerCase())
        ) {
            count++;
            var temp = {
                serviceData: SMMService_APIData[j][0][k],
                serviceTitle: SMMService_APIData[j][1],
                serviceRefUrl: SMMService_APIData[j][2],
                serviceSlug: SMMService_APIData[j][3],
            };
            relevantServices.push(temp);
        }
    }
}
relevantServices=shuffleArray(relevantServices);
//Counting Panel that provides services
let panelCount = 0;
for (let j = 0; j < SMMService_APIData.length; j++) {
    for (let k = 0; k < SMMService_APIData[j][0].length; k++) {
        if (
            SMMService_APIData[j][0][k].name
                .toString()
                .toLowerCase()
                .includes(service.serviceTitle.toString().toLowerCase())
        ) {
            panelCount++;
            break;
        }
    }
}

// console.log("Relevant Services are - " , relevantServices);

//Fetching Site Settings
const allSiteFetch:any = await fetch(getAPIPath() + "api/siteData.json").then(Response => Response.json());

let servicePageListCount = allSiteFetch[0].platformServiceCount || 20;

// console.log(allPanelAPIs.length);
// console.log(SMMService_APIData.length);
// console.log(relevantServices.length);
---

<PanelLayout 
    title={service.serviceTitle + " Services at SMM Panel"} 
    metaDescription={`Checkout more than ${count-5} services related to `+ service.serviceTitle + " on " + allSiteFetch[0].SiteTitle}
    pageFeaturedImage = {service.serviceLogo.url}
    >
    <div class="content-wrapper flex flex-wrap lg:justify-start justify-center gap-5 my-6 px-5">
        
        <article class="flex flex-col gap-5 w-full">
            <span
                class="header lg:w-full w-[90vw] flex gap-4 flex-col lg:flex-row p-5 rounded-xl text-white"
                style={`background-color: ${service.serviceColor}`}
            >
                <span class="flex gap-4 lg:w-[70%]">
                    <span class="flex p-3 size-28 rounded-lg bg-white">
                        <img
                            src={service.serviceLogo.url}
                            alt={service.serviceTitle}
                            class="size-full rounded"
                        />
                    </span>
                    <span>
                        <h1 class="text-5xl font-bold">
                            {service.serviceTitle}
                        </h1>
                        <span class="text-2xl font-semibold"
                            >{count! ? count + " Services Available" : ""}</span
                        >
                    </span>
                </span>
                <span class="text-2xl lg:w-[35%] font-semibold"
                    >{
                        panelCount!
                            ? `Panels Providing Services : ${allPanelRes.length-(Math.floor(Math.random() * 11))}`
                            : ""
                    }</span
                >
            </span>
    
            {
                relevantServices.length > 0 
                ? 
                <div class="services lg:min-h-[400px] flex flex-col justify-center items-center">
                <h2 class="text-3xl font-semibold">Services</h2>
    
                <div class="services-table-holder shadow-2xl text-center mt-5 lg:w-full w-[89vw] overflow-auto">
                    <div class="table-wrapper md:w-full w-[900px]">
                        <span
                            class="offerHeader w-full flex bg-[#36304a] font-semibold text-white">
                            <span class="offer_id my-6 w-[5%] pl-2">S.No</span>
                            <span class="offer_service my-6 w-[27.5%]">Service</span>
                            <span class="offer_Minorder my-6 w-[13.5%]">Min order</span>
                            <span class="offer_Maxorder my-6 w-[13.5%]">Max order</span>
                            <span class="offer_rate my-6 w-[13.5%]">Rate per 1000</span>
                            <span class="offer_rate my-6 w-[13.5%]">SMM Panel</span>
                            <span class="offer_rate my-6 w-[13.5%]">Visit Panel</span>
                        </span>
    
                        {
                            relevantServices.map((smm_service: any, j: number) => (
                                <span
                                    class="offerList w-full flex border-b border-gray-400"
                                    class:list={[
                                        j + 1 == 1 && "pageCounter",
                                        j + 1 > servicePageListCount && "hidden",
                                    ]}
                                >
                                    <span class="offer_id line-clamp-1 my-3 w-[5%] pl-2">
                                        {j + 1}
                                    </span>
                                    <span
                                        class="offer_service line-clamp-1 my-3 w-[27.5%] text-left"
                                        title={smm_service.serviceData.name}>
                                        {smm_service.serviceData.name}
                                    </span>
                                    <span class="offer_Minorder line-clamp-1 my-3 w-[13.5%]">
                                        {smm_service.serviceData.min}
                                    </span>
                                    <span class="offer_Maxorder line-clamp-1 my-3 w-[13.5%]">
                                        {smm_service.serviceData.max}
                                    </span>
                                    <span class="offer_rate line-clamp-1 my-3 w-[13.5%]">
                                        ${smm_service.serviceData.rate}
                                    </span>
                                    <span class="offer_panelTitle line-clamp-1 my-3 w-[13.5%]">
                                        <a class="hover:underline hover:font-semibold" href={`/panels/` + smm_service.serviceSlug }>{smm_service.serviceTitle}</a>
                                    </span>
                                    <span class="offer_rate line-clamp-1 my-3 w-[13.5%]">
                                        <a class="hover:underline hover:font-semibold" href={smm_service.serviceRefUrl}>{smm_service.serviceTitle} <i class="fa-solid fa-up-right"></i></a>
                                    </span>
                                </span>
                            ))
                        }
                    </div>
                </div>
                {
                    relevantServices.length > servicePageListCount && (
                        <div
                            class="paginationHolder flex flex-col gap-3 w-full items-center my-5"
                            data-pageSize={servicePageListCount}
                        >
                            <div class="paginationBtns flex gap-3 items-center">
                                <div class="prevbtns flex justify-center items-center cursor-pointer rounded-full size-12 bg-slate-700 text-white border">
                                    <i class="fa-duotone fa-chevrons-left" />
                                </div>
                                <div class="paginationInfo text-center">
                                    <span class="rounded-lg p-4 h-full font-bold">
                                        Showing Results
                                    </span>
                                    <span class="pageNumber block" />
                                </div>
                                <div class="nextbtns flex justify-center items-center cursor-pointer rounded-full size-12 bg-slate-700 text-white border">
                                    <i class="fa-duotone fa-chevrons-right" />
                                </div>
                            </div>
                        </div>
                    )
                }
            </div>
                : <h2 class="font-bold text-xl text-center">Sorry No Service Available right now for this Website.</h2>
            }
    
            
        </article>
        
    </div>
</PanelLayout>


<script is:inline src="/assets/scripts/main.js"></script>
<script is:inline>
    try {
        let pageSize = Number(
            document
                .querySelector(".paginationHolder")
                .getAttribute("data-pageSize"),
        );
        let allServiceList = document.querySelectorAll(".offerList");
        let pagiNextBtn = document.querySelector(".paginationBtns .nextbtns");
        let pagiPrevBtn = document.querySelector(".paginationBtns .prevbtns");
        let pageNumber = document.querySelector(".paginationBtns .pageNumber");
        var currentPosition,
            lastPosition = allServiceList.length;
        var pageNo = 1;
        allServiceList.forEach((serviceItem) => {
            if (serviceItem.classList.contains("pageCounter")) {
                currentPosition =
                    Number(serviceItem.children[0].textContent) - 1;
                return;
            }
        });
        updatePageNumber();

        pagiNextBtn.addEventListener("click", () => {
            paginate("next");
            updatePageNumber();
        });

        pagiPrevBtn.addEventListener("click", () => {
            paginate("prev");
            updatePageNumber();
        });

        function paginate(paginateType) {
            allServiceList.forEach((serviceItem) => {
                serviceItem.classList.add("hidden");
                serviceItem.classList.remove("pageCounter");
            });

            if (paginateType == "next") {
                if (currentPosition + pageSize < lastPosition){
                    bringToView("header");
                    currentPosition = currentPosition + pageSize;
                }
                else {
                    //block Next Button
                }
            } else if (paginateType == "prev") {
                if (currentPosition - pageSize >= 0){
                    bringToView("header");
                    currentPosition = currentPosition - pageSize;
                }
                else {
                    //block prev Button
                }
            }

            pageNo = currentPosition / pageSize + 1;

            allServiceList[currentPosition].classList.add("pageCounter");

            allServiceList.forEach((serviceItem, index) => {
                if (serviceItem.classList.contains("pageCounter")) {
                    for (let i = 0; i < pageSize; i++) {
                        if (index + i < allServiceList.length)
                            allServiceList[index + i].classList.remove(
                                "hidden",
                            );
                    }
                }
            });
        }
        function updatePageNumber() {
            pageNumber.textContent = `${pageNo} of ${Math.ceil(allServiceList.length / pageSize)}`;
        }
    } catch (error) {}
</script>